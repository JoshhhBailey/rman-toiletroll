shader tissuePatternCircles(
    // Can be interpolated from an 's' or 't' variable attached to the geometry
    float s = 0 [[int lockgeom = 0]],
    float t = 0 [[int lockgeom = 0]],

    // Perlin Noise
    float height = 0.005,
    int frequency = 5,

    output color resultRGB = 0,
    output float dispOut = 0)
{
    // Mirroring
    float s_repeats = 8;
    float t_repeats = 3;
    float ss = mod(s * s_repeats, 1);
    float tt = mod(t * t_repeats, 1);
    
    // Circle properties
    float innerRadius = 0.0;
    float outerRadius = 0.010;

    // Row properties
    int rings = 3;
    float distanceBetweenRows = outerRadius * 5;

    // Displace and colour blank canvas
    resultRGB = color(0.95, 0.95, 0.95);
    dispOut = height * (float)noise("perlin", P * frequency);
    dispOut += 0.003 * (float)noise("perlin", P * 150);

/// STIPPLING START
    float stipRepeats = 2;
    float stipSS = mod(s * stipRepeats, 1);

    color lineColour = color(0.0, 0.0, 0.0);
    float lineWidth = 0.001;
    
    // Draw line
    if (stipSS < lineWidth)
    {
        lineColour = color(0.95, 0.95, 0.95);
    }
    
    // Incrementally indent line, to create stippled effect
    float waveLength = 3.141 * 30;
    color wave = color(sin(waveLength * t));
    wave *= lineColour;

    dispOut += wave[0] / 150;
/// STIPPLING END

/// PATTERN START
// The following part is adapted from:
// Kesson, M., 2002. OSL Rosette. [online]
// Available from: https://www.fundza.com/rfm/osl/rosette/index.html
// Accessed [25 March 2021]
    
    // Circles counted on physical object as reference: Small = 18, 9, 0   Medium = 32, 22, 14   Large = 50, 44, 36
    point circlesPerRing = point(36, 44, 50);

    float s_centre = 1.0;
    float t_centre = 0.0;
    float circleSize = 0.2;
    point stPoint = point(ss, tt, 0);
    point rotPoint;
    float rotS;
    float rotT;
    float ringsPerCircle = 3;

/// PATTERN START
    for (int rows = 0; rows < 3; ++rows)
    {
        for (int circlesPerRow = 0; circlesPerRow < 2; circlesPerRow++)
        {
            // Centre point of circle (to rotate around)
            point centrePoint = point(s_centre, t_centre, 0);
            point axisPoint = point(s_centre, t_centre, 1);

            // Draw position
            float sOffset = s_centre - circleSize;
            float tOffset = t_centre;

            for (int i = 0; i < ringsPerCircle; ++i)
            {
                float angle = radians(360 / circlesPerRing[i]);
                for (int j = 0; j < circlesPerRing[i]; ++j) {
                    // Rotate surface
                    rotPoint = rotate(stPoint, j * angle, centrePoint, axisPoint);
                    rotS = rotPoint[0];
                    rotT = rotPoint[1];

                    // Draw circle
                    float dist = distance(point(sOffset, tOffset, 0), point(rotS, rotT, 0));
                    if (dist <= outerRadius && dist >= innerRadius)
                    {
                        dispOut -= dist * 0.75;
                    }
                }
                sOffset -= distanceBetweenRows;
            }
            t_centre += 1.0;
        }
        if (rows == 1)
        {
            t_centre = 0.5;
            s_centre = 0.5;
        }
        else
        {
            t_centre = 0.0;
            s_centre -= 1.0;
        }
    }
/// PATTERN END
}